/**
\mainpage jletk Overview
\section About
\subsection Why

Some years ago I wrote a C++ toolkit with regular expressions, tuples, class definition IDL, fsm IDL, config files. LL(n) parser, signal-slot, date time...

These last years, C++ world has moved a lot.

Now gcc and other compilers run a lot of features from C++11, C++14 and partially from C++17

Some of the tools I wrote or added to my library, are not necessary any more.
The implementation and API can also be improved.

In example... I wrote a smart_pointer called CountPtr. I also wrote to manage tuples. These two
features has been added to C++

Now, we also have type inference, lambdas, variadic templates, initializer lists...

It's time to enjoy and write a new set of tools based on modern C++

Previously I wrote the documentation with **asciidoc**, muse over emacs and doxys. Now I'm going to test doxygen with this project.


\subsection Directives

My aim is different from C++.

- Safety
    - I don't like undefined behaviour
    - I don't like crashes due to programming mistakes
    - C++ is a dangerous language. It's easy to have crashes, I want a library protecting and helping the programmer.
- KISS
    - Simple and easy to use API (the implmentation could be complex)
- YAGNI
    - I will introduce features as soon I will require
- Small
    - This is to have basic features, not incredible posibilies. There are great C++ libraries for that.
- Portability (win/linux)
- zero dependency
    - C++ doesn't have a standard dependency tool. It is going to be a small library, complex dependencies not requiered
- Easy to compile

Performance is desired but not over performance, easy api...



\section Safe

Crash reasons and how to deal with it...


Crash  | Deal with...
------------- | -------------
Non trapped exception  | main message loop trapping all exceptions
Null pointer  | generate an exception is better to undefined behaviour (usually crash)
Dangling pointers | smarkt pointers and signal slot. Please RAII everywhere <br> No arithmetic pointers
Invalid iterators | Exception is better than undefined behaviour (even for deterministic false positives)
Memory leaks | same as previous one
Infinite loops | reduce loops ussage
Consuming all resources | _
Integer zero division | throw an exception

jltk will also provide a base exception class with stack. You will have to fill the stack manually (this is C++)



\section Folders

Folder  | Description
------------- | -------------
src  |  source code
src/support  |  _
src/xxx  |  pending
bin  | generated bins
doc  | generated doc
test | source for unit testing
examples  | ex source
data  |  general data


\section Roadmap

I don't plan to use it daily. I will write it simultaneously with... web applications with dart, polymer, enjoing Elixir, learning from Go and Rust, following Scala...

In any case, I plan to follow next order (more or less)...

- smart_pointer
    - just a safe wrapper over stl
- signal-slot
- date_time
- exception type with stack
- integer div 0 protection
- string tools
- IDL class generation
    - stream
    - yaml
    - json
    - less operator
    - equal operator
    - ...
- IDL fsm generation
- ...


    
\section Todo

- At this moment... all

*/